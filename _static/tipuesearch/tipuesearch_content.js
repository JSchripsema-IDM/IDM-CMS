var tipuesearch_info = 'Generated by gti.py on 2017-08-18 23:17:08.591000';
var tipuesearch = {"pages": [{"url": "./Approximate Methods.html", "text": "Approximate Methods \u00b6 The following methods sacrifice accuracy for computational efficiency. BLeaping Hybrid SSA Midpoint Tau-Leaping RLeaping RLeapingFast Tau-Leaping", "tags": "", "title": "Approximate Methods \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./BLeaping.html", "text": "BLeaping \u00b6 BLeaping solver implements explicit tau leaping method with a fixed step size [1] . Here, the fixed step size is assumed to be small enough such that propensity function values do not change dramatically between time steps. Skipping tau selection and thus never reverting back to SSA may speed up the simulation time. However, accuracy is expected to be low, and it is possible to reach negative population. When the latter phenomenon occurs, BLeaping solver sets the corresponding population to zero and displays a warning message recommending the user to reduce the step size. .json file template { \"duration\" : 5 , \"runs\" : 5000 , \"solver\" : \"B\" , \"samples\" : 50 , \"prng_seed\" : 123 , \"b-leaping\" : { \"Tau\" : 0.01 } } .json syntax for BLeaping solver takes a string as an input. B , BLeap , and BLeaping are all valid names to run this solver. Tau takes a float as an input, which is the size of the fixed time step used throughout the simulation. If tau is missing in the .json file, a default value of 0.1 is used. Footnotes [1] Gillespie, Daniel T. \u201cApproximate accelerated stochastic simulation of chemically reacting systems.\u201d Journal Of Chemical Physics 115 4 (2001)", "tags": "", "title": "BLeaping \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./cms-installation.html", "text": "CMS installation \u00b6 Installation step 1. Installation step 2.", "tags": "", "title": "CMS installation \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./configuration-file.html", "text": "Configuration file \u00b6 The compartmental modeling software does not require a configuration file. However, the default settings for duration (100) and runs (1) are generally not very useful. A minimally useful configuration file would specify which solver to use, how many realizations to calculate, the duration of each realization (specified in unit-less time relevant to the timescales of the model), and the number of samples of the various observables to take over the duration of the simulation. This example specifies the Gillespie Stochastic Simulation Algorithm, 100 realizations, a duration of 730 time units (e.g. two years for a model with rates specified in days), and 250 samples of each realization spaced evenly over the 730 time unit duration. { \"solver\" : \"SSA\" , \"runs\" : 100 , \"duration\" : 730 , \"samples\" : 250 } Additional options for the configuration file include control of the output, control of the pseudo-random number generator, and solver specific parameters. Output Options prefix Specifies the main name of the output files to be written. The default is \u201ctrajectories\u201d. writecsv Specifies whether or not to write realization data in CSV format. The default is true . writerealizationindex Specifies whether or not to add a suffix with the realization index to each observable name in a CSV file. The default is true . compress Specifies whether or not CSV and JSON output files should be compressed using gzip or MATLAB .MAT files with internal compression. This can be useful for large data files. The default is false . writejson Specifies whether or not to write realization data in JSON format. The default is false . Sample JSON output file: { \"FrameworkVersion\" : \"1.0.176.23\" , \"BuildDescription\" : \"clorton (CMS/Main/framework)\" , \"Runs\" : 1 , \"Samples\" : 100 , \"ObservableNames\" : [ \"susceptible\" , \"exposed\" , \"infectious\" , \"recovered\" ], \"ChannelTitles\" : [ \"susceptible{0}\" , \"exposed{0}\" , \"infectious{0}\" , \"recovered{0}\" ], \"SampleTimes\" : [ 0.0 , 1.010101 , 2.020202 , \"etc.\" , 98.9899 , 100.0 ], \"ChannelData\" : [ [ 990.0 , 979.0 , 974.0 , 973.0 , \"etc.\" , 281.0 , 286.0 ], [ 0.0 , 11.0 , 15.0 , 14.0 , \"etc.\" , 5.0 , 3.0 ], [ 10.0 , 9.0 , 8.0 , 6.0 , \"etc.\" , 6.0 , 7.0 ], [ 0.0 , 1.0 , 3.0 , 7.0 , \"etc.\" , 708.0 , 704.0 ] ], \"ObservablesCount\" : 4 } channeltitles Specifies whether or not to populate the ChannelTitles array in JSON output files. If set to true the entries of the ChannelTitles pair with the channel data in the ChannelData array. Each entry in ChannelTitles consists of an observable name followed by the realization number in curly braces, e.g. \"susceptible{0}\" . The default is false . writematfile Specifies whether or not to write realization data in MATLAB .mat format. The default is true . newmatformat Specifies whether to use the original MATLAB schema or the \u201cnew\u201d MATLAB schema. The original schema provided for 4 elements in the .MAT file: version - a string observables - a # of observables rows x 1 column cell matrix with the names of the observable quantities sampletimes - a 1 row x # of samples column matrix of sample times data - a (# of observables x # of realizations) rows x # of samples columns matrix The \u201cnew\u201d schema is as follows: version - a string sampletimes - a 1 row x # of samples column matrix of sample times observable1\u2026observableN - each entry a # of realizations row x # of samples column matrix The default is false . Sample output configuration (defaults): { \"output\" : { \"prefix\" : \"trajectories\" , \"writecsv\" : true , \"writerealizationindex\" : true , \"compress\" : false , \"writejson\" : false , \"channeltitles\" : false , \"writematfile\" : true , \"newmatformat\" : false } } Pseudo-Random Number Generator See the random number library page for pseudo-random number configuration parameters. Solver Specific Configuration See the individual page for each solver for solver specific configuration parameters.", "tags": "", "title": "Configuration file \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./create-configuration-file.html", "text": "Create a configuration file \u00b6 How to create a configuration file TBD.", "tags": "", "title": "Create a configuration file \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./create-network-model.html", "text": "Create a network model \u00b6 How to create a network model TBD.", "tags": "", "title": "Create a network model \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./custom-propensity-function.html", "text": "Custom propensity function \u00b6 How to create a custom propensity function TBD.", "tags": "", "title": "Custom propensity function \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./DFSP.html", "text": "DFSP \u00b6 Diffusive Finite State Projection (DFSP) [1] is a solver developed for simulating diffusion processes in compartmental models. Diffusion events are modeled as particles that transition to neighboring locales. DFSP is ideally suited for systems with a small number of particles, i.e. on the order of 10s or 100s of particles per locale. In terms of the errors of the diffusion solvers, they are all first-order in time and second-order in space, and are therefore similar to using one of the leaping algorithms for the simulation of diffusion processes. The diffusion methods however execute single reaction events per time-step, as opposed to leaping algorithms that execute multiple reaction events per time-step, and are therefore useful if the modeler chooses to capture detailed events. Note that all of the diffusion solvers do not need explicit parameter specifications and will automatically use default parameters. .json DFSP file template { \"duration\" : 1024 , \"runs\" : 512 , \"solver\" : \"DFSP\" , \"dfsp\" : { \"umax\" : 120 , \"verbose\" : false } } A portion of an .emodl file is included below to show how diffusive events are specified for TransportSSA , DFSP, and OptimalTransportSSA . ( locale site-1 ) ( set-locale site-1 ) ( species A::1 1000 ) ( locale site-2 ) ( set-locale site-2 ) ( species A::2 1000 ) ( reaction A1->A2 ( A::1 ) ( A::2 ) ( * D A::1 )) ( reaction A2->A1 ( A::2 ) ( A::1 ) ( * D A::2 )) Note that D represents the diffusion coefficient and that the reactions specify transitions of species A to neighboring locales. .json syntax for DFSP solver takes a string as an input. DFSP , DiffusionFSP , and TransportFSP are all valid names to run this solver. epsilon (optional) epsilon takes a float greater than zero 0 and much less than 1 and determines the error of the approximation. A value of close to zero is equivalent to a standard stochastic simulation and a value close to 1 is the most aggressive speedup (and largest error). A default value of 0.01 is used which can be overridden by the user. We recommend not changing this value. verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. uMax (optional for DFSP) uMax takes an integer value between 1 and infinity and is the maximum number of particles per subvolume without violating the error condition. The maximum value is 150, the default value is 120. If your problem is expected to have more than this, consider using TransportSSA for the solver. Footnotes [1] Brian Drawert, Michael J Lawson, Linda Petzold, Mustafa Khammash, \u201cThe Diffusive Finite State Projection Algorithm for Efficient Simulation of the Stochastic Reaction-Diffusion Master Equation\u201d. Journal of Chemical Physics, 2010.", "tags": "", "title": "DFSP \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./dwSSA.html", "text": "dwSSA \u00b6 The doubly weighted Stochastic Simulation Algorithm (dwSSA) [1] solver is developed solely for estimating rare event probabilities and thus should not be used for recording time-course trajectories. dwSSA requires a set of biasing parameters to reach the rare event of interest. If a set of biasing parameters is not provided in the .json configuration file, dwSSA will execute multilevel cross-entropy (CE) method prior to the dwSSA simulation to obtain optimal (minimum CE) biasing parameters. The solver then employs these biasing parameters in selecting the next reaction and the next time step, yielding a trajectory weight that is a product of likelihood ratios from importance sampling. For the successful trajectories that reach the rare event, these weights are used to compute an unbiased estimator of the rare event probability with a confidence interval [2] . .json file template { \"duration\" : 10 , \"runs\" : 1000000 , \"solver\" : \"dwSSA\" , \"dwSSA\" : { \"gamma\" : [ 1.53 , 0.45 ], \"reValName\" : \"reVal\" , \"reExpressionName\" : \"reExpression\" , \"crossEntropyRuns\" : 100000 , \"crossEntropyThreshold\" : 0.01 , \"crossEntropyMinDataSize\" : 300 , \"outputFileNate\" : \"SIR_dwSSA_1e6.txt\" } } .json syntax for dwSSA solver takes a string as an input. dwSSA is the only valid names to run this solver. reExpressionName takes a string as an input, which is the name of the function that defines the rare event expression in .emodl model file. If reExpressionName field is missing in the .json file, then the dwSSA solver will search .emodl file for reExpression as the default name of the function. reValName takes a string as an input, which is the name of the parameter that defines the rare event value in .emodl model file. If reValName field is missing in the .json file, then the dwSSA solver will search .emodl file for reVal as the default name of the parameter. gammas takes a vector of positive real numbers as an input. The length of gammas is equal to the total number of reactions in the model. They are used as importance sampling parameters in selecting the next reaction and the next time step, as well as in computing the likelihood ratio of a biased trajectory. If gammas is missing in the .json file, multilevel cross entropy (CE) simulations are performed to compute optimal gamma values prior to dwSSA simulations. crossEntropyRuns takes an integer greater or equal to 5000 as an input. It defines the number of trajectories simulated in each level of multilevel CE method. This parameter is used only in multilevel CE simulations and is not required for dwSSA simulations. If crossEntropyRuns is missing in the .json file but required to run multilevel CE simulations, then a default value of 100,000 is used. crossEntropyThreshold takes a real value in (0, 1) as an input and defines the fraction of top performing trajectories chosen to compute an intermediate rare event. It is used only in multilevel CE simulations and not required for dwSSA simulations. If crossEntropyThreshold is missing in the .json file but required to run multilevel CE simulations, then a default value of 0.01 (1%) is used. .. note: If slow convergence is detected during the multilevel CE simulations , the value of crossEntropyThreshold is decreased to 80 % of its previous value . crossEntropyMinDataSize takes an integer greater or equal to 100 as an input and defines the minimum number of successful trajectories required to compute an intermediate rare event. If crossEntropyMinDataSize is missing in the .json file, default value of 200 is used. If crossEntropyRuns \u00a0 x \u00a0 crossEntropyThreshold is less than crossEntropyMinDataSize , the multilevel CE method dynamically adjusts the value of crossEntropyRuns such that crossEntropyRuns is set to the smallest integer greater than crossEntropyMinDataSize divided by crossEntropyThreshold . outputFileName takes a string as an input. If outputFileNate is missing in the .json file, then a default name is used in the form of modelName _dwSSA_1e log ( runs ), where the base of log is 10 and modelName is the name of the .emodl file. Recorded information includes runs , estimate for the rare event probability, 68% uncertainty, and sample variance. Footnotes [1] Daigle, Bernie J et al. \u201cAutomated estimation of rare event probabilities in biochemical systems.\u201d The Journal of Chemical Physics 134 4 (2011): 04410. [2] Gillespie, Dan T et al. \u201cRefining the weighted stochastic simulation algorithm.\u201d The Journal of Chemical Physics 130 17 (2009): 174103.", "tags": "", "title": "dwSSA \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./emodl.html", "text": "EMODL \u2013 model language for an input model file \u00b6 Introduction text TBD.", "tags": "", "title": "EMODL \u2013 model language for an input model file \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Exact Methods.html", "text": "Exact Methods \u00b6 Assuming a homogenously mixed system, these methods are exact in that every reaction firing and its time are computed explicitly. Gillespie GillespieFirstReaction Gibson-Bruck Next Reaction", "tags": "", "title": "Exact Methods \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./ExitTimes.html", "text": "ExitTimes \u00b6 ExitTimes [1] is a solver developed for computing the time it takes for a specified event to occur. For example, you may want to compute the time it takes for the infectious population to reach zero. This method will usually be faster than the standard stochastic simulation algorithm. The method attempts to group the propensities into sets, approximate their values, and sample the final time from multiple gamma distributions. See [1] for a detailed derivation. ExitTimes can be supplied with two parameters: epsilon and verbose . However, if the user does not supply these values, default values will be used. It is recommended to not change the default values unless there is reason to do so. If one wishes to speed up the simulation time, the epsilon parameter should be made larger. Note however that the accuracy of the method will decrease if epsilon is made larger. .json ExitTimes file template { \"duration\" : 30 , \"runs\" : 20000 , \"solver\" : \"ET\" , \"et\" : { \"verbose\" : false , \"epsilon\" : 0.2 } } .emodl ExitTimes file template ; sir model with exit condition ( import ( rnrs ) ( emodl cmslib )) ( start-model \"sir-exit\" ) ( locale site-a ) ( set-locale site-a ) ( species S 95 ) ( species I 5 ) ( species R 0 ) ( observe Susceptible S ) ( observe Infected I ) ( observe Recovered R ) ( param beta 0.015 ) ( param gamma 1.0 ) ( reaction S->I ( S ) ( I ) ( * beta S I )) ( reaction I->R ( I ) ( R ) ( * gamma I )) ( bool exitTimeEvent ( == R 85 ) ) ( end-model ) .json syntax for ExitTimes solver takes a string as an input. ExitTimes , ET , and ExitTime are all valid names to run this solver. epsilon (optional) epsilon takes a float between 0 and 1 and determines the error of the approximation. A value of zero is equivalent to a standard stochastic simulation and a value of 1 is the most aggressive speedup (and largest error). A default value of 0.2 is used which can be overridden by the user. We recommend not changing this value. verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. Footnotes [1] ( 1 , 2 ) Basil Bayati, \u201cA Method to Calculate the Exit Time in Stochastic Simulations\u201d. https://arxiv.org/abs/1512.04468", "tags": "", "title": "ExitTimes \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./FractionalDiffusion.html", "text": "FractionalDiffusion \u00b6 FractionalDiffusion (FD) [1] is a solver developed for simulating heavy-tailed diffusion events in compartmental models. As opposed to standard diffusion events that model transitions to neighboring locales, FD allows transitions to any locale irrespective of how far away it is. The probability of a particle jumping to a distant locale is small but non-zero. See [1] for more details. The method several parameters, but the most important of which for modeling physical processes are alpha and Dalpha, which represent the value of the fractional derivative and the diffusion coefficient, respectively. Alpha takes a floating point value between zero and 2, where a value closer to zero will result in a distribution with heavy tails and a value of 2 will result in a Gaussian distribution with rapidly vanishing tails. Note that the solver does not need parameter specifications and will automatically use default parameters. Diffusive events are not specified since the solver assumes that all species can diffusive anywhere in the domain. The emodl files should just include the reaction events. .json FractionalDiffusion file template { \"duration\" : 10 , \"runs\" : 1 , \"samples\" : 100 , \"solver\" : \"FD\" , \"fd\" : { \"alpha\" : 1.6 , \"constant\" : 0.025 , \"Dalpha\" : 1.0 , \"verbose\" : true } } .json syntax for FractionalDiffusion solver takes a string as an input. FractionalDiffusion , Fractional , FD , Levy , and LevyFlight are all valid names to run this solver. alpha (optional) alpha takes a float greater than 0 and less than or equal to 2 and determines the value of the fractional derivative. A value close to zero results in a diffusive process with very large kurtosis. A value close (or equal) to 2 results in Gaussian-like diffusion. A default value of 1 is used which results in a Cauchy distribution for the diffusion process. Dalpha (optional) Dalpha takes a floating point value between zero and infinity. This is the diffusion coefficient. The default value is 1. h (optional) h takes a floating point value greater than zero and less than infinity. This is the physical distance between locales. If not specified the value is set to 1. constant (optional) constant takes a floating point value greater than zero but much less than one. This is used for meeting the time step criteria and is the Courant\u2013Friedrichs\u2013Lewy (CFL) condition for parabolic partial differential equations. A default value of 0.25 is used if the user does not specify a value. truncation (optional) truncation takes an integer value greater than one and less than the size of the domain divided by 2. This is the maximum number of locales are particle can jump. To ensure that particles remain far away from the boundary, the default value is the number of locales divided by 4. It is not recommended to change the default value. For details regarding truncation and boundary effects, see [1] . verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver Footnotes [1] ( 1 , 2 , 3 ) Basil Bayati, \u201cFractional Diffusion-Reaction Stochastic Simulations\u201d. Journal of Chemical Physics, 2013.", "tags": "", "title": "FractionalDiffusion \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./genindex.html", "text": "Index N N new term", "tags": "", "title": "Index \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./GibsonBruck.html", "text": "Gibson-Bruck Next Reaction \u00b6 The Gibson-Bruck Next Reaction method [1] is an exact stochatic simulation algorithm that is more efficient than the standard Gillespie SSA. Specifically, this method uses only a single random number per simulation event. Also, the simulation time is proportional to the logarithm of the number of reactions. The implementation of the next reaction method in this framework is based on the work by Gibson et. al [1] . .json file template { \"duration\" : 365 , \"runs\" : 512 , \"solver\" : \"NextReaction\" } .json syntax for Gibson-Bruck Next Reaction Method solver takes a string as an input. Next , NextReaction , and GobsonBruck are all valid names to run this solver. Footnotes [1] ( 1 , 2 ) Gibson, B. and Bruck, J. \u201cEfficient Exact Stochastic Simulation of Chemical Systems with Many Species and Many Channels.\u201d The Journal of Physical Chemistry A, 104 9 (2000): 1876-1889.", "tags": "", "title": "Gibson-Bruck Next Reaction \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Gillespie.html", "text": "Gillespie \u00b6 Gillespie algorithm [1] , also known as the Stochastic Simulation Algorithm (SSA), is an exact Monte Carlo procedure for numerically generating time trajectories of the system state populations in accordance with the chemical master equation (CME), which is the governing probability distribution of all possible states in time in homogenously mixed population. Gillespie solver features the Direct Method (DM) implementation, which is the most commonly used. The other variant of the algorithm, First Reaction Method (FRM), is theoretically equivalent to the DM but differs in implementation. FRM is implemented in GillespieFirstReaction . While these methods are exact, both the Gillespie and the GillespieFirstReaction solvers are computationally expensive as every reaction and its firing time are explicitly computed. .json file template { \"duration\" : 100 , \"runs\" : 10000 , \"solver\" : \"Gillespie\" , \"prng_seed\" : 0 , \"samples\" : 50 , \"output\" : { \"prefix\" : \"SSA\" , \"writecsv\" : true , \"compress\" : false , \"writeMatFile\" : true , \"writeSampleTimes\" : false } } .json syntax for Gillespie solver takes a string as an input. Gillespie , GillespieDirect , and SSA are all valid names to run this solver. Footnotes [1] Gillespie, Daniel T. \u201cExact stochastic simulation of coupled chemical reactions.\u201d The Journal of Physical Chemistry 81.25 (1977): 2340-361.", "tags": "", "title": "Gillespie \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./GillespieFirstReaction.html", "text": "GillespieFirstReaction \u00b6 Gillespie First Reaction solver implements the First Reaction Method (FRM) version of the Gillespie algorithm [1] . The other version, the Direct Method (DM), is implemented in Gillespie . While the two methods are theoretically equivalent, they differ in implementation. FRM generates a potential reaction time for every reaction and chooses the reaction corresponding to the earliest reaction time, thus first reaction . In DM implementation, the next reaction time is generated first. Then a reaction is chosen after considering the likelihood of each reaction firing at the computed time. .json file template { \"duration\" : 100 , \"runs\" : 10000 , \"solver\" : \"First\" , \"prng_seed\" : 10 , \"samples\" : 120 , \"output\" : { \"prefix\" : \"FirstReaction\" , \"writecsv\" : true , \"compress\" : false , \"writeMatFile\" : false , \"writeSampleTimes\" : false } } .json syntax for GillespieFirstReaction solver takes a string as an input. First , FirstReaction , and GillespieFirstReaction are all valid names to run this solver. Footnotes [1] Gillespie, Daniel T. \u201cExact stochastic simulation of coupled chemical reactions.\u201d The Journal of Physical Chemistry 81.25 (1977): 2340-361.", "tags": "", "title": "GillespieFirstReaction \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./glossary.html", "text": "Glossary \u00b6 new term Example definition. You can then link to glossary entries using the new term format.", "tags": "", "title": "Glossary \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./howto-software.html", "text": "How to use the software \u00b6 How to use the software TBD. Create a configuration file Create a network model Custom propensity function Run simulations", "tags": "", "title": "How to use the software \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Hybrid.html", "text": "Hybrid SSA \u00b6 An event queue SSA hybrid is an algorithm that combines a Gillespie Solver and an event queue [1] . For the SSA, the rates associated with the chemical reactions are based on a fundamental observation that the reactions occur at an average rate. In epidemiology, this assumption may hold well for certain state transitions (e.g. Susceptible to Infected), but not others (e.g. Infected to Recovered). In the latter case, the hybrid algorithm uses the SSA for the transitions that are similar to chemical reactions, whereas event queues are used for the other types of transitions such as delays. For example, the event queue could be utilized for a fixed recovery time of individuals from the infected state. The combination of these two algorithms allow for a greater range of disease models to be implemented by the compartmental modeling structure. .json file template { \"duration\" : 365 , \"runs\" : 512 , \"solver\" : \"Hybrid\" , \"hybrid\" : { \"method\" : \"RejectionMethod\" } } .json syntax for Hybrid SSA solver takes a string as an input. Hybrid is the only valid name to run this solver. method takes a string as an input. RejectionMethod and ExactMethod are names of two methods offered by the Hybrid SSA. The default for this field is RejectionMethod . Footnotes [1] Cai, X. \u201cExact stochastic simulation of coupled chemical reactions with delays.\u201d The Journal of Chemical Physics 126 (2007): 124108.", "tags": "", "title": "Hybrid SSA \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./index.html", "text": "Compartmental Modeling Software (CMS) \u00b6 Introduction text TBD. Introduction to compartmental modeling CMS installation Introduction to the software EMODL \u2013 model language for an input model file Configuration file Random number library Solvers Exact Methods Approximate Methods Spatial Simulation Methods Specialty Methods Output files How to use the software Create a configuration file Create a network model Custom propensity function Run simulations Glossary", "tags": "", "title": "Compartmental Modeling Software (CMS) \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./introduction-modeling.html", "text": "Introduction to compartmental modeling \u00b6 Compartmental modeling is widely used among epidemiologists to simulate disease dynamics. While deterministic compartmental models (ODEs and PDEs) are fast to simulate, there are many cases where stochastic modeling ( CME -based methods) is preferred. Stochastic framework provides distributions associated with characteristics of a process and rigorous procedures for inference. In addition, deterministic models do not provide an accurate description of the system when the population in any of the compartments is low. For example, consider the following simple SIR model. \\begin{aligned} S + I & \\stackrel{\\beta}{\\rightarrow} 2I,& \\beta = 0.001 \\\\ I & \\stackrel{\\gamma}{\\rightarrow} R, & \\gamma = 0.1 \\\\ \\end{aligned} \\\\ \\mathbf{x}_0 = [200 \\: 1 \\: 0] \\quad t_f = 150 In the above system, we start with 200 susceptible individuals, 1 infectious and 0 recovered. Twenty stochastic trajectories are simulated using Gillespie\u2019s stochastic simulation algorithm (SSA) [1] and its results are compared to that of ODE45 . We can see that many of the SSA trajectories show no outbreak. This is due to having only one infectious individual in the initial state. Probability of the single infectious individual recovering in the next time step is 1/3 \\left(\\frac{1 \\times 0.1}{200 \\times 1 \\times 0.001+1 \\times 0.1}\\right) while infecting one of 200 susceptible individual is 2/3 \\left(\\frac{200 \\times 1 \\times 0.001}{200 \\times 1 \\times 0.001+1 \\times 0.1}\\right) . At the same time, we also see SSA trajectories that contain earlier and larger outbreak (population of I ) compared to the trajectory of I from deterministic simulation. With a large number of SSA trajectories, we can obtain an accurate distribution of states in time. For example, the distribution of recovered individuals R at t = t_f(150) using 10^5 SSA trajectories looks like the following: Such distribution can be used to obtain many useful insights into the system. The first mode in the distribution (left peak) indicates that no large outbreak is observed almost half of the time by t=150 . The second mode indicates the type of population immunity that may be observed at t=150 . Looking at the same distribution in time can be used to study how the immunity changes over time. As the size of population increases, SSA trajectories start looking more similiar to the ODE result and exhibit less variability among themselves. When we change the initial population to x_0 = [2000 \\: 100 \\: 0] , we get the following result. We note that intrinsic stochasticity may differ greatly from one model to another, depending on many factors, such as reaction rates, number of non-linear reactions, connectivity among different compartments, and population size. When a system contains compartments with a relatively large population where stochastcitity still matters, we can use an approximate method to speed up the simulation. Several popular spatial simulation methods are also supported in CMS, along with rare event ( dwSSA and sdwSSA ) and exit time simulation methods. Footnotes [1] Gillespie, Daniel T. \u201cExact stochastic simulation of coupled chemical reactions.\u201d The Journal of Physical Chemistry 81.25 (1977): 2340-361.", "tags": "", "title": "Introduction to compartmental modeling \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./introduction-software.html", "text": "Introduction to the software \u00b6 Introduction to software TBD. EMODL \u2013 model language for an input model file Configuration file Random number library Solvers Exact Methods Gillespie GillespieFirstReaction Gibson-Bruck Next Reaction Approximate Methods BLeaping Hybrid SSA Midpoint Tau-Leaping RLeaping RLeapingFast Tau-Leaping Spatial Simulation Methods DFSP FractionalDiffusion OptimalTransportSSA TransportSSA Specialty Methods ExitTimes dwSSA sdwSSA Output files", "tags": "", "title": "Introduction to the software \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Midpoint.html", "text": "Midpoint Tau-Leaping \u00b6 The midpoint tau-Leaping algorithm is a modification of tau-leaping [1] . Instead of using the current state of the system to evaluate the propensity functions, an estimated midpoint state is constructed. Then, this midpoint state is used to evaluate the propensity functions from the current time t. This modification has a direct analogy in the simulation of deterministic systems. .json file template { \"duration\" : 365 , \"runs\" : 1000 , \"solver\" : \"MidPoint\" , \"midpoint\" : { \"epsilon\" : 0.001 , \"nc\" : 2 , \"multiple\" : 10.0 , \"SSAruns\" : 100 } } .json syntax for Midpoint Tau-leaping solver takes a string as an input. Tau and TauLeaping are both valid names to run this solver. epsilon takes a float as an input. The parameter epsilon is used to compute the largest time step tau that is not likely to result in propensity function changes by more than epsilon multiplied by the sum of all the propensities. For larger values of tau, the step sizes will also be larger. If the epsilon field is missing in the .json file, then a deafult value of 0.01 is used. nc takes an integer as an input. The parameter nc is used as a threshold to separate critical and noncritical reactions. A critical reaction is defined as a reaction that is at risk for driving the count of a species below zero. If nc is chosen to be extremely large, then all reactions become critical. This case would reduce to the exact SSA . Alternatively, if nc is chosen to be zero, then there will not be any noncritical reactions. The case reduces to the original tauleaping algorithm in [1] . If the nc field is missing in the .json file, then a default value of 2 is used. multiple takes an integer as an input. The parameter multiple is used as a threshold to decide on whether to execute a series of SSA steps instead of a tauleap. If a leap value of tau is chosen (from the noncritical reaction rates) such that it is less than the multiple times 1 over the total propensity rate, than the SSA steps are performed. If the multiple field is missing in the .json file, then a default value of 10 is used. SSAruns takes an integer as an input. It defines the number of SSA runs that are performed when the proposed leap size from the noncritical reactions is less than multiple times 1 over the total propensity rate. If the SSAruns field is missing in the .json file, then a default value of 100 is used. Footnotes [1] ( 1 , 2 ) Gillespie, D. T. et al. \u201cApproximate accelerated stochastic simulation of chemically reacting systems.\u201d The Journal of Chemical Physics 115 4 (2001): 1716.", "tags": "", "title": "Midpoint Tau-Leaping \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./OptimalTransportSSA.html", "text": "OptimalTransportSSA \u00b6 The OptimalTransport Diffusion (OTSSA) is a solver that attempts to automatically choose between the TransportSSA (ISSA) [1] and Diffusive Finite State Projection (DFSP) [2] solvers. Diffusion events are modeled as particles that transition to neighboring locales. The ISSA method is ideally suited for systems with a large number of particles, i.e. 1000 particles or more at each locale. On the other hand, DFSP is ideally suited for systems with a small number of particles, i.e. on the order of 10s or 100s of particles. OTSSA will attempt to dynamically choose which of the above solvers to use per time-step. This solver is recommended if the modeler does not know whether the system contains a small or large number of particles, or if the modeler knows that the system evolve with both large and small populations. In terms of the errors of the diffusion solvers, they are all first-order in time and second-order in space, and are therefore similar to using one of the leaping algorithms for the simulation of diffusion processes. The diffusion methods however execute single reaction events per time-step, as opposed to leaping algorithms that execute multiple reaction events per time-step, and are therefore useful if the modeler chooses to capture detailed events. Note that all of the diffusion solvers do not need explicit parameter specifications and will automatically use default parameters. .json OTSSA file template { \"duration\" : 1024 , \"runs\" : 512 , \"solver\" : \"otssa\" , \"dfsp\" : { \"umax\" : 120 , \"verbose\" : false }, \"otssa\" : { \"verbose\" : false }, \"tssa\" : { \"epsilon\" : 0.01 , \"greensFunctionIterations\" : 100 , \"verbose\" : false } } A portion of an .emodl file is included below to show how diffusive events are specified for TransportSSA , DFSP , and OTSSA. ( locale site-1 ) ( set-locale site-1 ) ( species A::1 1000 ) ( locale site-2 ) ( set-locale site-2 ) ( species A::2 1000 ) ( reaction A1->A2 ( A::1 ) ( A::2 ) ( * D A::1 )) ( reaction A2->A1 ( A::2 ) ( A::1 ) ( * D A::2 )) Note that D represents the diffusion coefficient and that the reactions specify transitions of species A to neighboring locales. .json syntax for OTSSA solver takes a string as an input. OTSSA , OptimalTransportSSA , and DFSPPrime are all valid names to run this solver. epsilon (optional) epsilon takes a float greater than zero 0 and much less than 1 and determines the error of the approximation. A value of close to zero is equivalent to a standard stochastic simulation and a value close to 1 is the most aggressive speedup (and largest error). A default value of 0.01 is used which can be overridden by the user. We recommend not changing this value. verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. greensFunctionIterations (optional for ISSA) greensFunctionIterations takes an integer value between 1 and infinity and is the number of iterations used to compute the fundamental solution of the diffusion equation. The default value is 100. uMax (optional for DFSP) uMax takes an integer value between 1 and infinity and is the maximum number of particles per subvolume without violating the error condition. The maximum value is 150, the default value is 120. If your problem is expected to have more than this, consider using TransportSSA for the solver. transportSSAThreshold (optional for OTSSA) transportSSAThreshold takes an integer value between 1 and infinity and is the threshold for choosing when to run TransportSSA vs DFSP. The default value is uMax * graphDimension, where graphDimension is the dimension of the diffusion problem (this is calculated internally using the number of neighbors). It is not advisable to override the default value of this parameter. Footnotes [1] Lampoudi, D.T. Gillespie, & L.R. Petzold, \u201cThe Multinomial Simulation Algorithm for Discrete Stochastic Simulation of Reaction-Diffusion Systems\u201d. Journal of Chemical Physics, 2009. [2] Brian Drawert, Michael J Lawson, Linda Petzold, Mustafa Khammash, \u201cThe Diffusive Finite State Projection Algorithm for Efficient Simulation of the Stochastic Reaction-Diffusion Master Equation\u201d. Journal of Chemical Physics, 2010.", "tags": "", "title": "OptimalTransportSSA \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./output-analysis-matlab.html", "text": "Output analyses using Matlab \u00b6 How do output analyses using Matlab TBD.", "tags": "", "title": "Output analyses using Matlab \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./output-files.html", "text": "Output files \u00b6 Output files text TBD.", "tags": "", "title": "Output files \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./random-number-library.html", "text": "Random number library \u00b6 CMS supports four different pseudo-random number generators. These can be specified with \u201cRNG\u201d : { \u201ctype\u201d: prng-name } in the configuration file. AESCOUNTER is the default prng unless not supported in hardware in which case the compartmental modeling software falls back to PSEUDODES . The configuration file may optionally include the prng_seed and prng_index keys. These values are used to initialize the pseudo-random number generator. They both default to 0. prng_seed and prng_index together determine the initial state of the pseudo-random number generator. prng_index can be used to identify different runs of an experiment or to seed different instantiations of the compartmental modeling software across multiple processors. { \"PRNG\" : { \"type\" : \"VANILLA|RANDLIB|PSEUDODES|AESCOUNTER\" }, \"prng_seed\" : 2017 , \"prng_index\" : 42 } VANILLA The VANILLA prng is based on the .NET Random class. RANDLIB The RANDLIB prng is based on the pseudo-random number generator based on a combination of multiplicative linear congruential generators proposed by Pierre L\u2019Ecuyer [1] and used in numerous scientific computing libraries. PSEUDODES The PSEUDODES prng is based on the entropy generating step of the Data Encryption Standard published by NIST. The algorithm is psdes described in \u201c Numerical Recipes in C .\u201d AESCOUNTER The AESCOUNTER prng is similar in concept to PSEUDODES and is based on the entropy generating step of the Advanced Encryption Standard published by NIST in 2001. The implementation uses AES Counter Mode to generate a stream a pseudo-random numbers from the given seed values. [1] Efficient and Portable Combined Random Number Generators, Communications of the ACM, June 1988", "tags": "", "title": "Random number library \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./RLeaping.html", "text": "RLeaping \u00b6 RLeaping [1] is a solver developed for speeding up the standard stochastic simulation algorithm [2] . In the standard stochastic simulation algorithm, each reaction is simulated individually. In RLeaping, reactions are grouped together and executed at the same time. While leaping methods are approximate, they result in faster simulations. RLeaping can be supplied with four parameters: epsilon , theta , sortingInterval , and verbose . However, if the user does not supply these values, default values will be used. It is recommended to not change the default values unless there is reason to do so. If one wishes to speed up the simulation time, the epsilon parameter should be made larger. Note however that the accuracy of the method will decrease if epsilon is made larger. .json RLeaping file template { \"duration\" : 365 , \"runs\" : 512 , \"solver\" : \"RLeaping\" , \"r-leaping\" : { \"epsilon\" : 0.01 , \"theta\" : 0.0 , \"sorting interval\" : 365.0 , \"verbose\" : false } } .json syntax for RLeaping solver takes a string as an input. R and RLeaping are both valid names to run this solver. epsilon (optional) epsilon takes a float greater than zero 0 and much less than 1 and determines the error of the approximation. A value of close to zero is equivalent to a standard stochastic simulation and a value close to 1 is the most aggressive speedup (and largest error). A default value of 0.01 is used which can be overridden by the user. We recommend not changing this value. theta (optional) theta takes a float between 0 and 1 controls the timestep selection. If theta = 0, the most conversative timestep will be chosen which will limit the occurrence of a negative species value. The default value is zero which is recommended. sorting invterval (optional) sorting interval a positive real number between zero and infinity. The method will sort the reaction propensities according to this sorting interval. To disable sorting, set the sorting interval greater than or equal to the simulation time. A default value of 365 is used if not supplied by the user which corresponds to sorting the propensities every year (in terms of simulation time) verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. Footnotes [1] Anne Auger, Philippe Chatelain, and Petros Koumoutsakos, \u201cR-leaping: Accelerating the stochastic simulation algorithm by reaction leaps\u201d The Journal of chemical physics 125, 084103 (2006). [2] Gillespie, Dan T et al. \u201cRefining the weighted stochastic simulation algorithm.\u201d The Journal of chemical physics 130 17 (2009): 174103.", "tags": "", "title": "RLeaping \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./RLeapingFast.html", "text": "RLeapingFast \u00b6 RLeapingFast [1] [2] is a solver developed for speeding up the standard stochastic simulation algorithm. In the standard stochastic simulation algorithm (Gillespie\u2019s method [3] ) each reaction is simulated individually. The difference between RLeaping [1] and RLeapingFast [2] is the computation of how many reactions to leap over, which is likely to be quicker with RLeapingFast [2] . This method uses the time step computation developed for tau-Leaping [2] and recasts it for use in RLeapingFast. While leaping methods are approximate, they result in faster simulations. RLeapingFast can be supplied with four parameters: epsilon , theta , sortingInterval , and verbose . However, if the user does not supply these values, default values will be used. It is recommended to not change the default values unless there is reason to do so. If one wishes to speed up the simulation time, the epsilon parameter should be made larger. Note however that the accuracy of the method will decrease if epsilon is made larger. .json RLeapingFast file template { \"duration\" : 365 , \"runs\" : 512 , \"solver\" : \"RLeapingFast\" , \"r-leaping\" : { \"epsilon\" : 0.01 , \"sorting interval\" : 365.0 , \"verbose\" : false } } .json syntax for RLeapingFast solver takes a string as an input. RF , RFast , and RLeapingFast are all valid names to run this solver. epsilon (optional) epsilon takes a float greater than zero 0 and much less than 1 and determines the error of the approximation. A value of close to zero is equivalent to a standard stochastic simulation and a value close to 1 is the most aggressive speedup (and largest error). A default value of 0.01 is used which can be overridden by the user. We recommend not changing this value. theta (optional) theta takes a float between 0 and 1 controls the timestep selection. If theta = 0, the most conversative timestep will be chosen which will limit the occurrence of a negative species value. The default value is zero which is recommended. sorting invterval (optional) sorting interval a positive real number between zero and infinity. The method will sort the reaction propensities according to this sorting interval. To disable sorting, set the sorting interval greater than or equal to the simulation time. A default value of 365 is used if not supplied by the user which corresponds to sorting the propensities every year (in terms of simulation time) verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. Footnotes [1] ( 1 , 2 ) Anne Auger, Philippe Chatelain, and Petros Koumoutsakos, \u201cR-leaping: Accelerating the stochastic simulation algorithm by reaction leaps\u201d The Journal of chemical physics 125, 084103 (2006). [2] ( 1 , 2 , 3 , 4 ) Yang Cao, Daniel T. Gillespie, and Linda R. Petzold \u201cEfficient step size selection for the tau-leaping simulation method\u201d. Journal of Chemical Physics 124, 044109 (2006) [3] Gillespie, Dan T et al. \u201cRefining the weighted stochastic simulation algorithm.\u201d The Journal of chemical physics 130 17 (2009): 174103.", "tags": "", "title": "RLeapingFast \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./run-simulations.html", "text": "Run simulations \u00b6 How to run simulations TBD.", "tags": "", "title": "Run simulations \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./sdwSSA.html", "text": "sdwSSA \u00b6 Similar to the dwSSA solver, the state-dependent doubly weighted Stochastic Simulation Algorithm (sdwSSA) [1] is developed exclusively for estimating rare event probabilities and should not be used for recording time-course trajectories. sdwSSA employees state-dependent importance sampling using a set of parameters for each reaction in the model. If they biasing parameters are not provided in the .json configuration file, sdwSSA will execute multilvel cross-entropy (CE) method prior to the sdwSSA simulation to obtain optimal (minimum CE) biasing parameters. The overall flow of the algorithm is the same as the sdwSSA solver. After sdwSSA simulations finish, an estimate of the rare event with a confidence interval are returned as output [2] . .json file template { \"duration\" : 70 , \"runs\" : 100000 , \"solver\" : \"sdwSSA\" , \"sdwSSA\" : { \"reExpressionName\" : \"reExpression\" , \"reValName\" : \"SIR-RE-val\" , \"crossEntropyThreshold\" : 0.01 , \"crossEntropyMinDataSize\" : 300 , \"crossEntropyRuns\" : 100000 , \"gammaSize\" : 20 , \"binCount\" : 15 , \"biasingParametersFileNate\" : \"SIRS_biasingParameters_custom.json\" , \"outputFileNate\" : \"SIR_sdwSSA_1e5.txt\" } } .json syntax for sdwSSA solver takes a string as an input. sdwSSA is the only valid names to run this solver. reExpressionName takes a string as an input, which is the name of the function that defines the rare event expression in .emodl model file. If reExpressionName field is missing in the .json file, then the sdwSSA solver will search .emodl file for reExpression as the default name of the function. reValName takes a string as an input, which is the name of the parameter that defines the rare event value in .emodl model file. If reValName field is missing in the .json file, then the sdwSSA solver will search .emodl file for reVal as the default name of the parameter. gammaSize takes a positive integer as an input and defines the initial length of importance sampling parameters per reaction . binCount takes a positive integer greater or equal to 10 as an input. It specifies the minimum number of data required to maintain a single bin (bins are merged otherwise until each bin contains at least binCount data). binCount is used only in multilevel cross entropy (CE) simulations and is not required for sdwSSA simulations. If binCount is missing in the .json file but required to run multilevel CE simulations, then a default value of 20 is used. biasingParametersFileName takes a string as an input. It is the name of the .json file containing importance sampling (IS) parameters, which are used in the sdwSSA simulations. If biasingParametersFileName is missing, default name is created in the form of modelName _biasingParameters.json and multilevel CE simulations are performed to compute optimal IS parameters prior to running sdwSSA simulations. crossEntropyRuns takes an integer greater or equal to 5000 as an input. It defines the number of trajectories simulated in each level of multilevel CE method. This parameter is used only in multilevel CE simulations and is not required for sdwSSA simulations. If crossEntropyRuns is missing in the .json file but required to run multilevel CE simulations, then a default value of 100,000 is used. crossEntropyThreshold takes a real value in (0, 1) as an input and defines the fraction of top performing trajectories chosen to compute an intermediate rare event. It is used only in multilevel CE simulations and not required for sdwSSA simulations. If crossEntropyThreshold is missing in the .json file but required to run multilevel CE simulations, then a default value of 0.01 (1%) is used. .. note: If slow convergence is detected during the multilevel CE simulations , the value of crossEntropyThreshold is decreased to 80 % of its previous value . crossEntropyMinDataSize takes an integer greater or equal to 100 as an input and defines the minimum number of successful trajectories required to compute an intermediate rare event. If crossEntropyMinDataSize is missing in the .json file, default value of 200 is used. If crossEntropyRuns \u00a0 x \u00a0 crossEntropyThreshold is less than crossEntropyMinDataSize , the multilevel CE method dynamically adjusts the value of crossEntropyRuns such that crossEntropyRuns is set to the smallest integer greater than crossEntropyMinDataSize divided by crossEntropyThreshold . outputFileName takes a string as an input. If outputFileNate is missing in the .json file, then a default name is used in the form of modelName _sdwSSA_1e log ( runs ), where the base of log is 10 and modelName is the name of the .emodl file. Recorded information includes runs , estimate for the rare event probability, 68% uncertainty, and sample variance. Footnotes [1] Roh, Min K. et al. \u201cState-dependent doubly weighted stochastic simulation algorithm for automatic characterization of stochastic biochemical rare events.\u201d The Journal of Chemical Physics 135 (2011): 234108. [2] Gillespie, Dan T et al. \u201cRefining the weighted stochastic simulation algorithm.\u201d The Journal of Chemical Physics 130 17 (2009): 174103.", "tags": "", "title": "sdwSSA \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./search.html", "text": "Please activate JavaScript to enable the search functionality.", "tags": "", "title": "Search \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./solvers.html", "text": "Solvers \u00b6 The CMS software offers 16 different solvers. They can be categorized into the following categories. Note all solver names are case insensitive in their corresponding .json file. Exact Methods Gillespie GillespieFirstReaction Gibson-Bruck Next Reaction Approximate Methods BLeaping Hybrid SSA Midpoint Tau-Leaping RLeaping RLeapingFast Tau-Leaping Spatial Simulation Methods DFSP FractionalDiffusion OptimalTransportSSA TransportSSA Specialty Methods ExitTimes dwSSA sdwSSA", "tags": "", "title": "Solvers \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Spatial Simulation Methods.html", "text": "Spatial Simulation Methods \u00b6 These methods can simulate a spatial model. DFSP FractionalDiffusion OptimalTransportSSA TransportSSA", "tags": "", "title": "Spatial Simulation Methods \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./Specialty Methods.html", "text": "Specialty Methods \u00b6 These methods are designed for a specific purpose. ExitTimes dwSSA sdwSSA", "tags": "", "title": "Specialty Methods \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./TauLeaping.html", "text": "Tau-Leaping \u00b6 Tau-Leaping [1] is developed by Gillespie to increase the computational speed of the SSA, whicih is an exact method. Instead of computing the time to every reaction, this algorithm approximates the process and attempts to leap in time, executing a large number of reactions in a period tau . This algorithm is computationally faster; however, the approximation removes the \u201cexact\u201d connection to the solution of the ( master equation -based methods) for the system. The implementation of tau-leaping in CMS is based on a work by Cao et. al [2] . This modified tau-leaping algorithm helps avoid the possibility of creating negative species counts within a compartment. .json file template { \"duration\" : 365 , \"runs\" : 512 , \"solver\" : \"TauLeaping\" , \"tau-leaping\" : { \"epsilon\" : 0.001 , \"nc\" : 2 , \"multiple\" : 10.0 , \"SSAruns\" : 100 } } .json syntax for Tau-leaping solver takes a string as an input. Tau and TauLeaping are both valid names to run this solver. epsilon takes a float as an input. The parameter epsilon is used to compute the largest time step tau that is not likely to result in propensity function changes by more than epsilon multiplied by the sum of all the propensities. For larger values of tau, the step sizes will also be larger. If the epsilon field is missing in the .json file, then the tau-leaping solver will set the value to 0.001. nc takes an integer as an input. The parameter nc is used as a threshold to separate critical and noncritical reactions. A critical reaction is defined as a reaction that is at risk for driving the count of a species below zero. If nc is chosen to be extremely large, then all reactions become critical. This case would reduce to the exact SSA . Alternatively, if nc is chosen to be zero, then there will not be any noncritical reactions. The case reduces to the original tauleaping algorithm in [1] . If the nc field is missing in the .json file, then a default value of 2 is used. multiple takes an integer as an input. The parameter multiple is used as a threshold to decide on whether to execute a series of SSA steps instead of a tauleap. If a leap value of tau is chosen (from the noncritical reaction rates) such that it is less than the multiple times 1 over the total propensity rate, than the SSA steps are performed. If the multiple field is missing in the .json file, then a default value of 10 is used. SSAruns takes an integer as an input. It defines the number of SSA runs that are performed when the proposed leap size from the noncritical reactions is less than multiple times 1 over the total propensity rate. If the SSAruns field is missing in the .json file, then a default value of 100 is used. Footnotes [1] ( 1 , 2 ) Gillespie, D T. et al. \u201cApproximate accelerated stochastic simulation of chemically reacting systems.\u201d The Journal of Chemical Physics 115 4 (2001): 1716. [2] Cao, Y. et al. \u201cAvoiding negative populations in explicit Poisson tau-leaping.\u201d The Journal of Chemical Physics 123 (2005): 054104.", "tags": "", "title": "Tau-Leaping \u2014 Compartmental Modeling (CMS)  documentation"}, {"url": "./TransportSSA.html", "text": "TransportSSA \u00b6 TransportSSA (aka Inhomogeneous Stochastic Simulation Algorithm or ISSA) [1] , is a solver developed for simulating diffusion processes in compartmental models. Diffusion events are modeled as particles that transition to neighboring locales. The ISSA method is ideally suited for systems with a large number of particles, i.e. 1000 particles or more at each locale. In terms of the errors of the diffusion solvers, they are all first-order in time and second-order in space, and are therefore similar to using one of the leaping algorithms for the simulation of diffusion processes. The diffusion methods however execute single reaction events per time-step, as opposed to leaping algorithms that execute multiple reaction events per time-step, and are therefore useful if the modeler chooses to capture detailed events. Note that all of the diffusion solvers do not need explicit parameter specifications and will automatically use default parameters. .json TSSA file template { \"duration\" : 1024 , \"runs\" : 512 , \"solver\" : \"tssa\" , \"tssa\" : { \"epsilon\" : 0.01 , \"greensFunctionIterations\" : 100 , \"verbose\" : false } } A portion of an .emodl file is included below to show how diffusive events are specified for TSSA, DFSP , and OTSSA . ( locale site-1 ) ( set-locale site-1 ) ( species A::1 1000 ) ( locale site-2 ) ( set-locale site-2 ) ( species A::2 1000 ) ( reaction A1->A2 ( A::1 ) ( A::2 ) ( * D A::1 )) ( reaction A2->A1 ( A::2 ) ( A::1 ) ( * D A::2 )) Note that D represents the diffusion coefficient and that the reactions specify transitions of species A to neighboring locales. .json syntax for TSSA solver takes a string as an input. TSSA , TransportSSA , DiffusionSSA , and iSSA are all valid names to run this solver. epsilon (optional) epsilon takes a float greater than zero 0 and much less than 1 and determines the error of the approximation. A value of close to zero is equivalent to a standard stochastic simulation and a value close to 1 is the most aggressive speedup (and largest error). A default value of 0.01 is used which can be overridden by the user. We recommend not changing this value. verbose (optional) verbose takes a true or false flag. If true, extra information is printed to the command line, which can be useful for debugging or testing the solver. greensFunctionIterations (optional for ISSA) greensFunctionIterations takes an integer value between 1 and infinity and is the number of iterations used to compute the fundamental solution of the diffusion equation. The default value is 100. Footnotes [1] Lampoudi, D.T. Gillespie, & L.R. Petzold, \u201cThe Multinomial Simulation Algorithm for Discrete Stochastic Simulation of Reaction-Diffusion Systems\u201d. Journal of Chemical Physics, 2009.", "tags": "", "title": "TransportSSA \u2014 Compartmental Modeling (CMS)  documentation"}]};
